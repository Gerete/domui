/*
 * DomUI Java User Interface library
 * Copyright (c) 2010 by Frits Jalvingh, Itris B.V.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * See the "sponsors" file for a list of supporters.
 *
 * The latest version of DomUI and related code, support and documentation
 * can be found at http://www.domui.org/
 * The contact for the project is Frits Jalvingh <jal@etc.to>.
 */
package to.etc.domui.component.builder;

import javax.annotation.*;

import org.slf4j.*;

import to.etc.domui.component.form.*;
import to.etc.domui.component.meta.*;
import to.etc.domui.dom.html.*;
import to.etc.domui.server.*;
import to.etc.domui.util.*;

/**
 * Base class for form builder engines.
 *
 * @author <a href="mailto:jal@etc.to">Frits Jalvingh</a>
 * Created on Aug 13, 2009
 */
final public class FormBuilder {
	static protected final Logger LOG = LoggerFactory.getLogger(FormBuilder.class);

	@Nonnull
	private ModelBindings m_bindings = new ModelBindings();

	/** Thingy to help calculating access rights (delegate) */
	@Nonnull
	private final AccessCalculator m_calc = new AccessCalculator();

	@Nullable
	private ControlBuilder m_builder;

	@Nonnull
	private IFormLayouter m_layouter;

	@Nullable
	private IControlLabelFactory m_controlLabelFactory;

	private Object m_lastBuilderThingy;

	private FormData< ? > m_lastBuilder;

	/**
	 * Handle adding nodes generated by the form builder to the page.
	 *
	 * @author <a href="mailto:jal@etc.to">Frits Jalvingh</a>
	 * Created on Jun 13, 2012
	 */
	interface IAppender {
		void add(@Nonnull NodeBase formNode);
	}

	@Nonnull
	final private IAppender m_appender;

	/**
	 * Attach all nodes through the {@link IAppender} - all nodes are added using the
	 * {@link IAppender#add(NodeContainer)} method.
	 * @param a
	 */
	public FormBuilder(@Nonnull IAppender a, @Nullable IFormLayouter form) {
		m_appender = a;
		m_layouter = form;
		if(null != form)
			form.attached(this);
	}

	/**
	 *
	 * @param target
	 */
	public FormBuilder(@Nonnull final NodeContainer target, @Nullable IFormLayouter form) {
		this(new IAppender() {
			@Override
			public void add(@Nonnull NodeBase formNode) {
				target.add(formNode);
			}
		}, form);
	}

	public FormBuilder(@Nonnull final NodeContainer target) {
		this(target, null);
	}

	public FormBuilder(@Nonnull IAppender a) {
		this(a, null);
	}

	public FormBuilder(@Nonnull NodeContainer node, boolean horizontal) {
		this(node, horizontal ? new HorizontalFormLayouter() : new VerticalFormLayouter());
	}

	final protected void addControl(@Nullable NodeBase label, @Nullable NodeBase labelnode, @Nonnull NodeBase[] list, boolean mandatory, boolean editable, @Nonnull PropertyMetaModel< ? > pmm) {
		getLayouter().addControl(label, labelnode, list, mandatory, editable, pmm);
	}

	final protected void addContent(@Nullable NodeBase label, @Nonnull NodeBase[] control, boolean editable) {
		getLayouter().addContent(label, control, editable);
	}

	final protected void addControl(@Nullable String label, @Nullable NodeBase labelnode, @Nonnull NodeBase[] list, boolean mandatory, boolean editable, @Nonnull PropertyMetaModel< ? > pmm) {
		IControlLabelFactory clf = getControlLabelFactory();
		if(clf == null) {
			clf = getControlBuilder().getControlLabelFactory();
			if(clf == null)
				throw new IllegalStateException("Programmer error: the DomApplication instance returned a null IControlLabelFactory!?!?!?!?");
		}
		Label l = clf.createControlLabel(labelnode, label, editable, mandatory, pmm);
		getLayouter().addControl(l, labelnode, list, mandatory, editable, pmm);
	}

	/**
	 * Called by builders to add nodes that form the form.
	 * @param node
	 */
	public void appendFormNode(@Nonnull NodeBase node) {
		m_appender.add(node);
	}

	public void finish() {
		if(m_layouter != null)
			m_layouter.finish();
	}

	@Nonnull
	final public ControlBuilder getControlBuilder() {
		if(m_builder == null)
			m_builder = DomApplication.get().getControlBuilder();
		return m_builder;
	}

	/**
	 * Create the optimal control for the specified thingy, and return the binding for it.
	 *
	 * @param container		This will receive all nodes forming the control.
	 * @param model 		The content model used to obtain the Object instance whose property is being edited, for binding purposes.
	 * @param pmm			The property meta for the property to find an editor for.
	 * @param editable		When false this must make a displayonly control.
	 * @return				The binding to bind the control to it's valueset
	 */
	@Nonnull
	protected ControlFactoryResult createControlFor(@Nonnull final IReadOnlyModel< ? > model, @Nonnull final PropertyMetaModel< ? > pmm, final boolean editable) {
		return getControlBuilder().createControlFor(model, pmm, editable); // Delegate
	}

	/*--------------------------------------------------------------*/
	/*	CODING:	Simple getters and internal stuff.					*/
	/*--------------------------------------------------------------*/
	/**
	 * Access the shared permissions calculator.
	 */
	@Nonnull
	protected AccessCalculator rights() {
		return m_calc;
	}

	@Nonnull
	public ModelBindings getBindings() {
		return m_bindings;
	}

	public void setBindings(@Nonnull final ModelBindings bindings) {
		if(m_bindings != null && m_bindings.size() > 0)
			LOG.warn("Setting new bindings but current binding list has bindings!! Make sure you use the old list to bind too!!");
		m_bindings = bindings;
	}

	/**
	 * Return the factory to use for creating control labels from metadata.
	 * @return
	 */
	@Nullable
	public IControlLabelFactory getControlLabelFactory() {
		return m_controlLabelFactory;
	}

	public void setControlLabelFactory(@Nullable final IControlLabelFactory controlLabelFactory) {
		m_controlLabelFactory = controlLabelFactory;
	}

	@Nonnull
	public <T> FormData<T> data(@Nonnull T instance) {
		if(m_lastBuilderThingy == instance) {
			return (FormData<T>) m_lastBuilder;
		}
		FormData<T> b = new FormData<T>(this, instance);
		m_lastBuilder = b;
		m_lastBuilderThingy = instance;
		return b;
	}

	public void startBulkLayout() {
		getLayouter().setBulkMode(true);
	}

	public void endBulkLayout() {
		getLayouter().setBulkMode(false);
	}

	@Nonnull
	public IFormLayouter getLayouter() {
		if(null == m_layouter) {
			setLayouter(new VerticalFormLayouter());
		}
		return m_layouter;
	}

	/**
	 * Set a new layouter. The previous one is "finished".
	 * @param layouter
	 */
	public void setLayouter(@Nonnull IFormLayouter layouter) {
		if(m_lastBuilder == layouter)
			return;
		if(m_layouter != null)
			m_layouter.finish();
		if(layouter != null)
			layouter.attached(this);
		m_layouter = layouter;
	}
}
