#
# author: mbp
# Example properties file for the XML->CSV converter : to.mumble.csv.XMLToCSVConverter
#
# NOTE: a working eaxmple of how to use this is in the VFO project:
#
# nl.nccwcasa.qd.TestXMLToCSVConverter
#

#
# General CSV properties
#

# the field delimiter (default is double quotes)
#csv.delimiter='

# the field separator (default is comma)
#csv.separator=;

# the line termination sequence (default is newline as in UNIX)
csv.lineterm=\n\r

#
# How to escape a delimiter within the field data
# 0 = no escaping
# 1 = precede the delimiter character by a backslash
# 2 = print two delimiter characters (this is the default)
#csv.esc.delimiter=1

#
# How to escape a newline character when present in the field data
# Whatever you put here replaces the newline(s).
#
# Example:
# replaces newline with a '\' followed by an 'n' 
# (note the double backslash, that is because java escapes the
# backslash in a String by doubling it):
# csv.esc.newline=\\n
#
#
# replaces newline with a dot
csv.esc.newline=.


#
# XML Properties
#

# This tag idenitifies the record level nodes
# At present, record nodes should be direct children
# of the payload node.
tag.recordtag=klacht

#
# Translation definitions
#
# The sequence number in the keynames "tag.0.xxx", "tag.1.xxx" is meaningless
# in the translation and only has meaning in the initialization.
# It is an enumeration and should have no gaps in the values.
# The initialization process identifies the end of definitions by noticing
# that there is no "tag.nnn.xmlpath" key for some value of nnn.
#
# For each value nnn of the enum the following keys may or must be present:
#
# tag.nnn.xmlpath  mandatory
#   String. Describes how to get at the data value for this definition.
#
# tag.nnn.column   mandatory
#   Integer. The number of the CSV column (starting at 1) for whih this is the definition
#   Gaps are allowed, intermediary CSV columns are filled with null values.
#
# tag.nnn.quoted   optional
#   Boolean. indicator that tells if the value in the CSV should be quoted 
#   for this column. Default true, so only need to turn it off for 
#   numerical values (if at all).
#   Values for this key are true when not 'false', 'off' or 'no'
#
# tag.nnn.output_when_null  optional
#   String. Gives an alternative string to print in case a value is not known.
#   Can be used to print '0' for unknown numerical values.
#

tag.0.xmlpath=nummer
tag.0.column=1

tag.1.xmlpath=nummer.sub
tag.1.column=2
tag.1.quoted=false
tag.1.output_when_null=(null)

# notice that enum 3 and enum 2 are in recerse order 
# with respect to column
tag.3.xmlpath=oms
tag.3.column=4

tag.2.column=7
tag.2.xmlpath=urgent

tag.4.column=8
tag.4.xmlpath=tekst

# note that you can use the same xml data in different csv columns
tag.5.column=10
tag.5.xmlpath=oms

# 
# uncomment these for testing doubly defined columns
# should raise "column multiply defined" exception
#tag.6.column=8
#tag.6.xmlpath=urgent

# comment out tag.6.* then 
# uncomment this for testing gap in initialization enum
# should raise "gap in enum" exception
#tag.7.xmlpath=dogwood
#tag.7.column=12
