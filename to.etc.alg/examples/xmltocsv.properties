#
# Example conversion file to convert xml to CSV
# ---------------------------------------------
# jal 20050523 Initial version.
#

#------------------------------------------------------------
# CSV FORMAT DESCRIPTION.
#------------------------------------------------------------
# The output encoding for the resulting csv file.
csv.encoding=utf-8

# The string to use as a csv field separator. Defaults to ','
csv.separator=,

#
# The quoting indicator. This can have the following values:
# all 	- by default quote all of the fields
# string- quote only those fields that are not all number
# none	- do not quote at all by default
# The value for this can be overridden per field.
#
csv.quote=all

#
# The character to use for quoting
#
csv.quotechar=\"

#
# What to output if the quote character itself is found in output to escape it.
#
csv.quoteescape=\\\"

#
# What to do if a value contains invalid chars. The possible
# values are:
#
# c			- Use backslash escaping as per the C rules
# discard	- Remove the offending character.
# 
csv.escaperule=c


#------------------------------------------------------------
# XML -> CSV conversion rules.
#------------------------------------------------------------
#
# The xml.recordlist defines where the repeating list of items is in the
# document to convert. The / denotes that the root node of the document
# contains the list.
xml.recordlist=/woningen-lijst

# The XML name of the entity denoting a record within the list. 
xml.record=woning

# The XML conversion description. This describes the record to generate as a set of record descriptors.
csv.layout=vhenr,adres,postcode,woonplaats,kamer1,kamer2,kamer3

# The 'path' descriptor for a named item describes where in the record a given datum
# is found. This should be a path expression; the last member can be preceded with '@'
# to denote that the field is in an attribute of the entity specified by the path
# In the example below we specify that the 'vhenr' is in the 'vhenr' attribute of the
# 'current' element (which is defined as /woning, above).
vhenr.path=@vhenr

adres.path=adres

#
# Example: if the 'notrim' parameter is true then the string will not be space-trimmed.
adres.notrim=true

# Example: when true, newlines within the text will be kept and quoted in the csv file.
adres.keepnewline=true

# The following specifiers can be overridden on a per-field basis
adres.quote=true
adres.quotechar=\'
adres.quoteescape=\\\"
adres.escaperule=c

postcode.path=postcode

woonplaats.path=woonplaats

#
# The example below shows how to access repeating items within an element. The
# 'OPPERVLAKTE' element is part of a 'KAMER' element which is repeated within a
# 'KAMERS' element. The [ n ] indexes the element by number. THE INDEX STARTS
# AT ZERO 
kamer1.path=kamers/kamer[0]/oppervlakte

kamer2.path=kamers/kamer[1]/oppervlakte

kamer3.path=kamers/kamer[2]/oppervlakte
