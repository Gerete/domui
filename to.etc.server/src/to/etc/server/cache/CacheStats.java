package to.etc.server.cache;

import java.text.*;


/**
 *	A small data class containing statistic information that is the same for
 *  a number of objects.
 */
public class CacheStats {
	/// The higher-level stats structure.
	public CacheStats	m_up;

	/// The total #of times the template was used, since the run.
	public long			m_n_calls;

	/// The total #of bytes OUTPUT by this thing
	//	public long			m_osz_total;

	/// The total #of exceptions generated by this thing.
	public long			m_n_xcpt;

	/// The total #of redirects generated by this thing
	public long			m_n_redir;

	/// The total #of database IO's generated by this thing.
	public long			m_n_dbio;

	/// Total time used in RETRIEVES
	//	public long			m_t_retrieves, m_n_retrieves;

	/// Total #times that the resource was REloaded (cache clear)..
	public long			m_n_reloads;

	/// The #of bytes read by STATIC templates in unbuffered mode.
	public long			m_isz_staticunbuffered;

	/// Total #of bytes generated by UNBUFFERED STATIC resources
	public long			m_osz_staticunbuffered;

	/// Total times UNBUFFERED was generated
	public long			m_n_staticunbuffered;

	/// Total #ms taken in UNBUFFERED generation
	public long			m_t_staticunbuffered;

	//------------------------------------------------------------------------
	//------------- Template stuff -----------------
	//------------------------------------------------------------------------


	public CacheStats() {
	}

	public CacheStats(CacheStats up) {
		m_up = up;
	}


	/// Increments the exception count.
	synchronized public void exception() {
		m_n_xcpt++;
		if(m_up != null)
			m_up.exception();
	}

	/// Increment the #of bytes generated
	//	synchronized public void	oszUnknown(int sz)
	//	{
	//		m_osz_total	+= sz;
	//		if(m_up != null) m_up.oszUnknown(sz);
	//	}


	/// Increment the #of redirects.
	synchronized public void redirect() {
		m_n_redir++;
		if(m_up != null)
			m_up.redirect();
	}

	synchronized public void uses() {
		m_n_calls++;
		if(m_up != null)
			m_up.uses();
	}

	synchronized public void reloads() {
		m_n_reloads++;
		if(m_up != null)
			m_up.reloads();
	}


	//	synchronized public void	retrieveTime(long ms)
	//	{
	//		m_t_retrieves	+= ms;
	//		m_n_retrieves++;
	//		if(m_up != null) m_up.retrieveTime(ms);
	//	}


	/*--------------------------------------------------------------*/
	/*	CODING:	Static buffered statistics.							*/
	/*--------------------------------------------------------------*/
	/** Total #times BUFFERED STATIC was generated */
	public long	m_n_staticbuffered;

	/** Total #us(!) taken in static buffered generation */
	public long	m_t_staticbuffered;

	/** Total #of bytes generated by BUFFERED STATIC resources */
	public long	m_osz_staticbuffered;

	/** The #of bytes read by STATIC BUFFERED in buffer memory. */
	public long	m_isz_staticbuffered;

	/** The #of times a static buffered was loaded */
	public long	m_n_staticbuffered_load;

	/** The #us taken by loading a static buffered from StreamSource */
	public long	m_t_staticbuffered_load;


	/**
	 * Called after a static buffered generate with the #bytes generated and
	 * the time it took.
	 * @param size
	 * @param ustime
	 */
	public void staticBufferedGenerate(int size, long ustime) {
		synchronized(this) {
			m_n_staticbuffered++; // One more generated,
			//			m_osz_total				+= size;		// Total bytes written,
			m_osz_staticbuffered += size; // This much written,
			m_t_staticbuffered += ustime;
		}
		if(m_up != null)
			m_up.staticBufferedGenerate(size, ustime);
	}

	/**
	 * Called when a static resource is LOADED in memory.
	 * @param size		the #bytes that were loaded
	 * @param ustime	the time in ms the load took.
	 */
	public void staticBufferedLoad(int size, long ustime) {
		synchronized(this) {
			m_n_staticbuffered_load++;
			m_t_staticbuffered_load += ustime;
			m_isz_staticbuffered += size;
		}
		if(m_up != null)
			m_up.staticBufferedLoad(size, ustime);
	}

	/**
	 * Returns the average static load time in us.
	 */
	public synchronized long getAvgStaticBufferedLoadTime() {
		if(m_n_staticbuffered_load == 0)
			return 0;
		return m_t_staticbuffered_load / m_n_staticbuffered_load;
	}


	//	synchronized public void iszStaticBuffered(int nb)
	//	{
	//		m_isz_staticbuffered	+= nb;
	//		if(m_up != null) m_up.iszStaticBuffered(nb);
	//	}


	/*--------------------------------------------------------------*/
	/*	CODING:	Static UNBUFFERED (direct)							*/
	/*--------------------------------------------------------------*/
	public void iszStaticUnbuffered(int nb) {
		synchronized(this) {
			m_isz_staticunbuffered += nb;
		}
		if(m_up != null)
			m_up.iszStaticUnbuffered(nb);
	}

	public void oszStaticUnbuffered(int nb) {
		synchronized(this) {
			m_n_staticunbuffered++;
			m_osz_staticunbuffered += nb;
		}
		if(m_up != null)
			m_up.oszStaticUnbuffered(nb);
	}

	synchronized public void staticUnbufferedTime(long ms) {
		m_t_staticunbuffered += ms;
		if(m_up != null)
			m_up.staticUnbufferedTime(ms);
	}

	synchronized public long getAvgStaticBufferedTime() {
		if(m_n_staticbuffered == 0)
			return 0;
		return m_t_staticbuffered / m_n_staticbuffered;
	}

	synchronized public long getAvgStaticUnbufferedTime() {
		if(m_n_staticunbuffered == 0)
			return 0;
		return m_t_staticunbuffered / m_n_staticunbuffered;
	}

	/**
	 *	Returns the static template's cache efficiency, in percents.
	 */
	synchronized public String getCacheEff() {
		if(m_isz_staticbuffered == 0)
			return "---";

		double r = 1.0 - ((double) m_isz_staticbuffered / (double) m_osz_staticbuffered);
		NumberFormat f = NumberFormat.getInstance();
		f.setMinimumFractionDigits(2);
		return f.format(r * 100.0d) + "%";
	}


	/*--------------------------------------------------------------*/
	/*	CODING:	StaticFile caching...								*/
	/*--------------------------------------------------------------*/
	/** Total #ms taken generating static filecached resources */
	public long	m_t_staticfile_gen;

	/** Total #bytes generated from static file-cached */
	public long	m_osz_staticfile;

	/** Total #bytes read into static file-cached resources (from source to file) */
	public long	m_isz_staticfile;

	/** Total #of file-cache based generates (writing to browser), */
	public long	m_n_staticfile_gen;

	/** Total #of times a staticfile was loaded from a stream */
	public long	m_n_staticfile_load;

	/** Total #us in staticfile loads */
	public long	m_t_staticfile_load;

	/**
	 * Called when a static file was loaded.
	 * @param sz
	 */
	public void staticFileLoad(int sz, long ustime) {
		synchronized(this) {
			m_n_staticfile_load++;
			m_t_staticfile_load += ustime;
			m_isz_staticfile += sz;
		}
		if(m_up != null)
			m_up.staticFileLoad(sz, ustime);
	}

	public void staticFileGenerate(int sz, long times) {
		synchronized(this) {
			m_n_staticfile_gen++;
			m_osz_staticfile += sz;
			m_t_staticfile_gen += times;
		}
		if(m_up != null)
			m_up.staticFileGenerate(sz, times);
	}

	public synchronized long getStaticFileGenerates() {
		return m_n_staticfile_gen;
	}

	public synchronized long getStaticFileLoads() {
		return m_n_staticfile_load;
	}

	public synchronized long oszStaticFile() {
		return m_osz_staticfile;
	}

	public synchronized long iszStaticFile() {
		return m_isz_staticfile;
	}

	public synchronized long getAvgStaticFileTime() {
		if(m_n_staticfile_gen == 0)
			return 0;
		return m_t_staticfile_gen / m_n_staticfile_gen;
	}

	public synchronized long getAvgStaticFileLoadTime() {
		if(m_n_staticfile_load == 0)
			return 0;
		return m_t_staticfile_load / m_n_staticfile_load;
	}


	/*--------------------------------------------------------------*/
	/*	CODING:	Template statistics...								*/
	/*--------------------------------------------------------------*/
	/** The #of times a template resource was output */
	public long	m_n_tpl;

	/** Total time used in generations, in us(!) (to get average) */
	public long	m_t_tpl;

	/** Total #of bytes generated by TEMPLATE CODE */
	public long	m_osz_tpl;

	/** Total #times a template was compiled. */
	public long	m_n_tpl_compiles;

	/** Total time in us(!) taken by template compiles */
	public long	m_t_tpl_compiles;


	public void templateCompiled(long us) {
		synchronized(this) {
			m_n_tpl_compiles++;
			m_t_tpl_compiles += us;
		}
		if(m_up != null)
			m_up.templateCompiled(us);
	}


	/**
	 * Returns the average time, in us, that a template compile takes.
	 * @return	time in us, as total compile time / #of compiles.
	 */
	synchronized public long getAvgCompileTime() {
		if(m_n_tpl_compiles == 0)
			return 0;
		return m_t_tpl_compiles / m_n_tpl_compiles;
	}


	/// Increment the #of bytes generated by a template
	synchronized public void oszTpl(int sz) {
		m_n_tpl++;
		m_osz_tpl += sz;
		if(m_up != null)
			m_up.oszTpl(sz);
	}


	/**
	 * Template generate time, in us,
	 * @param us
	 */
	public void tplTime(long us) {
		synchronized(this) {
			m_t_tpl += us;
		}
		if(m_up != null)
			m_up.tplTime(us);
	}


	synchronized public long getAvgTplTime() {
		if(m_n_tpl == 0)
			return 0;
		return m_t_tpl / m_n_tpl;
	}


	/*--------------------------------------------------------------*/
	/*	CODING:	Get methods - misc...								*/
	/*--------------------------------------------------------------*/
	synchronized public long getosz_static() {
		return m_osz_staticbuffered + m_osz_staticunbuffered + m_osz_staticfile;
	}

	synchronized public long getn_static() {
		return m_n_staticbuffered + m_n_staticunbuffered + m_n_staticfile_gen;
	}

	/**
	 * Total #bytes output for ALL
	 * @return
	 */
	synchronized public long getOszTotal() {
		return m_osz_staticbuffered + m_osz_staticfile + m_osz_staticunbuffered + m_osz_tpl;
	}

	synchronized public long getTotalGenerates() {
		return m_n_staticbuffered + m_n_staticfile_gen + m_n_staticunbuffered + m_n_tpl;
	}
}
